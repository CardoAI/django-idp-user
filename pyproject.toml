[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
path = "idp_user/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["idp_user"]

[project]
name = "django_idp_user"
description = "A Django app that handles the communication between the IDP and the products for the authorization of users."
authors = [
    { email = "hello@cardoai.com" },
    { name = "Mahmoud Al-Rawy" },
    { name = "Euron Metaliaj" },
    { name = "Klajdi Çaushi" },
    { name = "Aleksandër Nasto" },
    { name = "Andi Çuku" },
    { name = "Klement Omeri" },
    { name = "Lirim Shala" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.0",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "Django",
    "pyjwt==2.6.0",
    "requests",
    "faust-streaming",
    "boto3",
    "djangorestframework",
    "drf_spectacular",
]
readme = "README.md"
requires-python = ">=3.9"
license = "MIT"
dynamic = ["version"]

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }


[project.optional-dependencies]
async = [
    "Django>=4.1.1",
    "asgiref>=3.6.0",
    "aiokafka>=0.8.0",
    "aiohttp>=3.8.4"
]
test = [
    "pytest==7.2.0",
    "black>=22.10.0",
    "isort==5.11.3",
    "ruff==0.0.259",
    "pytest-cov==4.0.0",
    "pytest-django==4.5.2",
    "Faker==15.3.4"
]
docs = [
    "mkdocs-material==9.0.6",
    "mdx_include==1.4.2",
    "mkdocs-markdownextradata-plugin==0.2.5",
    "termynal==0.2.1",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --capture=no --log-cli-level=INFO"
testpaths = [
    "tests",
]
python_files = ["test_*.py", "*_test.py", "testing/python/*.py"]
filterwarnings = [
    'ignore::DeprecationWarning:kombu.*:',
]
DJANGO_SETTINGS_MODULE = "tests.test_settings"


[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "import*",
]

[tool.coverage.run]
omit = ["*/migrations/*", "*/tests/*", "*/conf/*", "*__init__.py", "idp_user/apps.py", "idp_user/agents.py"]
source = ["idp_user"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data/
  | profiling
  | migrations
  | docs
  | deplyoment
  | .git
  | scripts
  | media
  | static
  | .venv
)/
'''

[tool.isort]
profile = "black"
skip = "migrations"

[tool.ruff]
line-length = 88
extend-exclude = [
    "*/migrations/*",
    "codebase/media/*",
    "codebase/static/*",
    "codbase/documents/tests/test_data/*",
    "*/conf/*",
    "codebase/manage.py",
    "*__init__.py",
    "idp_user"
]

select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    # "I",  # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "F405", # name may be undefined, or defined from star imports
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "migrations",
    "venv",
]
per-file-ignores = { }

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
