[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
path = "idp_user/__init__.py"

[project]
name = "django_idp_user"
description = "A Django app that handles the communication between the IDP and the products for the authorization of users."
authors = [
    {name = "Mahmoud Al-Rawy"},
    {name = "Euron Metaliaj"},
    {name = "Klajdi Çaushi"},
    {name = "Aleksandër Nasto"},
    {name = "Andi Çuku"},
    {name = "Andi Çuku"},
    {name = "Klement Omeri"},
]
dependencies = [
    "django>=4.0",
    "djangorestframework~=3.14.0",
    "pyjwt==2.6.0",
    "requests~=2.28.2",
    "drf_spectacular",
    "faust-streaming==0.10.10",
    "boto3~=1.26.98"
]
readme = "README.rst"
requires-python = ">=3.9"
license = "MIT"
dynamic = ["version"]

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}


[project.optional-dependencies]
test = [
    "pytest==7.2.0",
    "black>=22.10.0",
    "isort==5.11.3",
    "ruff==0.0.259",
    "pytest-cov==4.0.0",
    "Faker==15.3.4"
]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --capture=no --log-cli-level=INFO"
testpaths = [
    "tests",
]
python_files = "tests.py test_*.py *_tests.py"
filterwarnings = [
    'ignore::DeprecationWarning:kombu.*:',
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "import*",
]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data/
  | profiling
  | migrations
  | docs
  | deplyoment
  | .git
  | scripts
  | media
  | static
  | .venv
)/
'''

[tool.isort]
profile = "black"
skip = "migrations"

[tool.ruff]
line-length = 88
extend-exclude = [
    "*/migrations/*",
    "codebase/media/*",
    "codebase/static/*",
    "codbase/documents/tests/test_data/*",
    "*/conf/*",
    "codebase/manage.py",
    "*__init__.py",
    "idp_user"
]

select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    # "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "F405", # name may be undefined, or defined from star imports
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "migrations",
    "venv",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
